!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!**S/P  FLXSURF4
!
subroutine flxsurf4(cmu, ctu, rib, ftemp, fvap, ilmo, &
     ue, fcor, ta , qa , zu, zt, va, &
     tg , qg , h , z0 , z0t, &
     lzz0, lzz0t, fm, fh, n, optz0 )

  implicit none
#include <arch_specific.hf>
  integer n
  real cmu(n),ctu(n),rib(n),fcor(n),ilmo(n)
  real ftemp(n),fvap(n),ta(n),qa(n),zu(n),zt(n),va(n)
  real tg(n),qg(n),h(n),z0(n),ue(n)
  real z0t(n),lzz0(n),lzz0t(n)
  real fm(n),fh(n)
  integer optz0
  !
  !Author
  !          Y.Delage (Jul 1990)
  !Revision
  ! 001      G. Pellerin (Jun 94) New function for unstable case
  ! 002      G. Pellerin (Jui 94) New formulation for stable case
  ! 003      B. Bilodeau (Nov 95) Replace VK by KARMAN
  ! 004      M. Desgagne (Dec 95) Add safety code in function ff
  !                               and ensures that RIB is non zero
  ! 005      R. Sarrazin (Jan 96) Correction for H
  ! 006      C. Girard (Nov 95) - Diffuse T instead of Tv
  ! 007      G. Pellerin (Feb 96) Revised calculation for H (stable)
  ! 008      G. Pellerin (Feb 96) Remove corrective terms to CTU
  ! 009      Y. Delage and B. Bilodeau (Jul 97) - Cleanup
  ! 010      Y. Delage (Feb 98) - Addition of HMIN
  ! 011      D. Talbot and Y. Delage (Jan 02) -
  !             Correct bug of zero divide by dg in loop 35
  ! 012      Y. Delage (Oct 03) - Set top of surface layer at ZU +Z0
  !                   - Output UE instead of UE**2 and rename subroutine
  !                   - Change iteration scheme for stable case
  !                   - Introduce log-linear profile for near-neutral stable cases
  !                   - set VAMIN inside flxsurf and initialise ILMO and H
  !                   - Put stability functions into local functions via stabfunc.cdk
  ! 013      Y. Delage (Sep 04) - Input of wind and temperature/humidity
  !                                at different levels
  ! 014      R. McTaggart-Cowan and B. Bilodeau (May 2006) -
  !             Clean up stabfunc.cdk
  ! 015      L. Spacek (Dec 07) - Correction of the log-linear profile
  !                               Double precision for rib calculations
  ! 016      A. Zadra (Feb 11) - clean-up and generalization
  ! 017      A. Zadra (Sep 11) - convert to fortran 90
  ! 018      S. Leroyer (Apr 11) - Argument optz0  for options for roughness lenghts computation
  ! 019      M. Abrahmowicz (May 13) - optz0=0 now means no extra roughness calculation (no call to compz0)
  !
  !Object
  !          to calculate surface layer transfer coefficients and fluxes
  !
  !Arguments
  !
  !          - Output -
  ! cmu      transfer coefficient of momentum times UE
  ! ctu      transfer coefficient of temperature times UE
  ! rib      bulk Richardson number
  ! ftemp    temperature flux
  ! fvap     vapor flux
  ! ilmo     (1/length of Monin-Obukov)
  ! ue       friction velocity
  ! h        height of the boundary layer
  ! fm       momentum stability function
  ! fh       heat stability function
  ! lzz0     log ((zu+z0)/z0)
  ! lzz0t    log ((zt+z0t)/z0t)
  !
  !          - Input -
  ! fcor     Coriolis factor
  ! zu       height of wind input (measured from model base at topo height + Z0)
  ! zt       height of temperature and humidity input
  ! ta       potential temperature at ZT
  ! qa       specific humidity at ZT
  ! va       wind speed at ZU
  ! tg       surface temperature
  ! qg       specific humidity at the surface
  ! z0       roughness length for momentum      flux calculations
  ! z0t      roughness length for heat/moisture flux calculations
  ! n        horizontal dimension
  ! optz0    option for z0, z0t formulations -- optz0=0 : NO EXTRA CALCULATIONS.
  !
  !
#include "surfcon.cdk"
  include "thermoconsts.inc"
  !
      EXTERNAL COMPZ0
  !
  integer j,it,itmax
  real cm,ct
  real x1,x0,y1,y0
  real*8 dthv,tva,tvs
  real vmin,ribmin,hmax,cormin,epsln
  real am,ah,dfm,dfh,g,dg
  real, dimension(n) :: zp
  real, external :: sf_heat,sf_momentum,sf_pblheight
  
  !     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !     Initialize internal parameters: 
  !     - maximum number of iterations (itmax)
  !     - minimum value of wind speed (vamin)
  !     - minimum absolute value of bulk Richardson number (ribmin)
  !     - maximum value of boundary layer depth (hmax)
  !     - minimum value of inverse Monin-Obukhov length (epsln)
  !
  itmax  = 3
  vmin   = 0.1
  ribmin = 1.0e-05
  hmax   = 1500.0
  epsln  = 1.0e-05
  !
  !     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !     STEP 1: Impose minimum value on wind speed (va) and initialize neutral 
  !             stability functions (lzz0 and lzz0t)
  !                 lzz0  = log( (zu+z0 )/z0  ) = log( 1+zu/z0  )
  !                 lzz0t = log( (zt+z0t)/z0t ) = log( 1+zt/z0t )
  !             z0, z0t are from the previous time step
  !
  do j=1,n
     va(j)    = MAX(va(j),vmin)
     lzz0 (j) = 1+zu(j)/z0(j)
     lzz0t(j) = 1+zt(j)/z0t(j)
  enddo
  call vslog(lzz0t,lzz0t,n)
  call vslog(lzz0 ,lzz0 ,n)
  !
  !     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !     STEP 2: Calculate bulk Richardson number (rib)
  !              rib = A/(B^2)
  !              A = (g/tvm)*(tva-tvs)/zt = buoyancy term
  !                 tva = atmospheric virtual temperature
  !                 tvs = surface virtual temperature
  !                 tvm = 0.5*(tva+tvs)
  !              B = va/zu = shear
  !
  do j=1,n
     zp(j)  = zu(j)**2/zt(j)
     tva    = (1.d0+delta*qa(j))*ta(j)
     tvs    = (1.d0+delta*qg(j))*tg(j)
     dthv   = tva-tvs
     rib(j) = grav/(tvs+0.5*dthv)*zp(j)*dthv/(va(j)*va(j))
     if (rib(j).ge.0.0) rib(j) = MAX(rib(j), ribmin)
     if (rib(j).lt.0.0) rib(j) = MIN(rib(j),-ribmin)
  enddo
  !
  !     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !     STEP 3: Calculate inverse length of Monin-Obukhov (ilmo), integrated 
  !             stability functions (fm, fh) and boundary-layer height (h)
  !             using an iterative method to solve the equation:
  !                  rib - (fh/fm^2)*zp*ilmo = 0
  !             This is done by defining an auxiliary function
  !                  g(ilmo) = rib - (fh/fm^2)*zp*ilmo
  !             and finding its zero using a Newton-Raphson method
  !                  ilmo_(n+1) = ilmo_n - g/dg
  !             where
  !                  dg  = derivative of g w.r.t. ilmo
  !                      = -fh/(fm^2)*zp*(1+dfh/fh-2*dfm/fm)
  !                  dfh = derivative of fh w.r.t. ilmo
  !                  dfm = derivative of fm w.r.t. ilmo
  !
  !------ first guess for fm, fh (chosen as small deviations am,ah from the
  !       neutral case) and the corresponding first guess for ilmo
  !
  do j=1,n
     if(rib(j).ge.0.)  then
        am = 2.5*as*rib(j)/MAX(      2*z0(j)     ,1.0)
        ah = 2.5*as*rib(j)/MAX(SQRT(z0(j)*z0t(j)),1.0)
     else
        am = -MIN(0.7+LOG(1-rib(j)),lzz0 (j)-1)
        ah = -MIN(0.7+LOG(1-rib(j)),lzz0t(j)-1)
     endif
     fm(j)   =       lzz0 (j) + am
     fh(j)   = beta*(lzz0t(j) + ah)
     ilmo(j) = rib(j)*fm(j)*fm(j)/(zp(j)*fh(j))
  enddo
  !
  !------ iterative solution using Newton-Raphson method
  !       (no convergence criterion, but fixed number of 
  !        iterations = itmax-1)
  !
  do it=1,itmax 

     if(optz0.gt.0) then
        !-- new computation of z0 and z0t from the last computed fm
        ! and repeat step 1 for new lzz0 lzz0t
        call compz0(optz0, z0, z0t, fm, va, fcor,n)
        !
        do j=1,n
           lzz0 (j) = 1+zu(j)/z0(j)
           lzz0t(j) = 1+zt(j)/z0t(j)
        enddo
        call vslog(lzz0t,lzz0t,n)
        call vslog(lzz0 ,lzz0 ,n)
     endif
     !
      do j=1,n
        if (rib(j).ge.0.) ilmo(j) = MAX( epsln,ilmo(j))
        if (rib(j).lt.0.) ilmo(j) = MIN(-epsln,ilmo(j))
        h(j)  = sf_pblheight(zu(j),z0(j),va(j),ilmo(j),fcor(j),fm(j))
        fm(j) =        lzz0 (j) &
             + sf_momentum(zu(j)+z0 (j),ilmo(j),h(j),x1) &
             - sf_momentum(      z0 (j),ilmo(j),h(j),x0) 
        fh(j) = beta*( lzz0t(j) &
             + sf_heat(zt(j)+z0t(j),ilmo(j),h(j),y1) &
             - sf_heat(      z0t(j),ilmo(j),h(j),y0)) 
        dfm =       x1 - x0
        dfh = beta*(y1 - y0)
        if (it.lt.itmax) then
           g  = rib(j) - fh(j)/(fm(j)*fm(j))*zp(j)*ilmo(j)
           dg = -fh(j)/(fm(j)*fm(j))*zp(j)*(1+dfh/fh(j)-2*dfm/fm(j))
           ilmo(j) = ilmo(j) - g/dg
        endif
     enddo
  enddo
  !
  !     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !     STEP 4: Calculate friction velocity (ue), transfer coefficients (cmu,ctu),
  !             temperature and vapor fluxes (ftemp, fvap):
  !               ue    = (k/fm)*va      ;  cmu = (k/fm)*ue
  !               ftemp = -ctu*(ta-tg)   ;  ctu = (k/fh)*ue
  !               fvap  = -ctu*(qa-qg)
  !             Note: the momemtum flux is not output separately because it is 
  !             simply given by
  !               fmom = cmu*va = (k/fm)*ue*va = ue^2
  !             Finaly, we impose a maximum on the BL height (h).
  !
  do j=1,n
     cm       = karman/fm(j)
     ct       = karman/fh(j)
     ue(j)    = cm*va(j)
     cmu(j)   = cm*ue(j)
     ctu(j)   = ct*ue(j)
     ftemp(j) = -ctu(j)*(ta(j)-tg(j))
     fvap(j)  = -ctu(j)*(qa(j)-qg(j))
     !
     h(j)     = MIN(h(j),hmax)
  enddo
  !
  !
  if(optz0.gt.0) then
     !     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
     !     STEP 5: Calculate aerodynamic (z0) and thermal (z0t) roughness lenghts
     !              z0 and z0t computed with the last fm for use of the next time step 
     !             
     call compz0(optz0, z0, z0t, fm, va, fcor, n)
     !
     !
  endif
  !
  !
  return
end subroutine flxsurf4

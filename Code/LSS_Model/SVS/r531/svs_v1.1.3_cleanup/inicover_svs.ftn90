!-------------------------------------- LICENCE BEGIN ------------------------------------
!Environment Canada - Atmospheric Science and Technology License/Disclaimer, 
!                     version 3; Last Modified: May 7, 2008.
!This is free but copyrighted software; you can use/redistribute/modify it under the terms 
!of the Environment Canada - Atmospheric Science and Technology License/Disclaimer 
!version 3 or (at your option) any later version that should be found at: 
!http://collaboration.cmc.ec.gc.ca/science/rpn.comm/license.html 
!
!This software is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
!without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
!See the above mentioned License/Disclaimer for more details.
!You should have received a copy of the License/Disclaimer along with this software; 
!if not, you can write to: EC-RPN COMM Group, 2121 TransCanada, suite 500, Dorval (Quebec), 
!CANADA, H9P 1J3; or send e-mail to service.rpn@ec.gc.ca
!-------------------------------------- LICENCE END --------------------------------------
!!!S/P INICOVER_SVS
!!
!
#include "phy_macros_f.h"
      SUBROUTINE INICOVER_SVS( F, FSIZ, KOUNT, NI )
!
#ifdef RUNSVS
USE runsvs_mod
#endif
      implicit none
#include <arch_specific.hf>
!
      INTEGER NI, KOUNT
      INTEGER FSIZ
      REAL F(FSIZ)
      integer i,j,k
!
!
!Author
!       M. Abrahamowicz (Jan 2013)
!
!Revision
! 001   Modified copy of inicover, to initialize SVS variables
! 002   M. Abrhamowicz(Jan 2013)
!            Modified values of D2DAT to match these of the pre-processor
! 003   M. Abrhamowicz(August 2013)
!            Replace covf by vegf 
!            Remove nclassurb in call to aggcovernat,aggveghigh,aggveglow
!            Done to be consistent with GEM v4.5.0-rc2
! 004  N. Gauthier ( March 2015)
!            Change definition and values related to VF 26
! 005  M. Abrahamowicz (March 2015)
!            Change values of z0mdat to match the ones used in PreX 1.2
!Object
!       Initialize vegetation fields for SVS SCHEME
!
!Arguments
!
!       - Input/Ouput -
! F        field for permanent physics variables
!       - Input -
! FSIZ     dimension of F
! KOUNT    current timestep number
! NI       horizontal slice dimension
!
!
!NOTES       
!
!
#include "nclassvg.cdk"
#include "options.cdk"
#ifndef RUNSVS
#include "phybus.cdk"
#endif
!
!
!                           the geophysical fields determined from
!                           vegetation are done so using the following
!                           classification:
!
!     Class       Vegetation type
!     =====       ===============
!       1         (salt) water
!       2         ice
!       3         inland lake
!       4         evergreen needleleaf trees
!       5         evergreen broadleaf trees
!       6         deciduous needleleaf trees
!       7         deciduous broadleaf trees
!       8         tropical broadleaf trees
!       9         drought deciduous trees
!       10        evergreen broadleaf shrub
!       11        deciduous shrubs
!       12        thorn shrubs
!       13        short grass and forbs
!       14        long grass
!       15        crops
!       16        rice
!       17        sugar
!       18        maize
!       19        cotton
!       20        irrigated crops
!       21        urban
!       22        tundra
!       23        swamp
!       24        desert
!       25        mixed wood forests
!       26        forests / fields mosaic
!
!
!
!********************************************************************
!                TABLES FOR THE VEG CHARACTERISTICS FOR EACH VEG TYPE
!********************************************************************
!
!
      REAL ALDAT(NCLASS), D2DAT(NCLASS), RSMINXDAT(NCLASS)
      REAL LAIDAT(NCLASS), VEGDAT(NCLASS),EMISDAT(NCLASS) 
      REAL CVDAT(NCLASS), RGLDAT(NCLASS), GAMMADAT(NCLASS)
      REAL RSMINDAT(NCLASS)
      REAL Z0MDAT(NCLASS)
!
      DATA ALDAT/ &
                     0.13   , 0.70   , 0.13   , 0.14   , 0.12   , &
                     0.14   , 0.18   , 0.13   , 0.17   , 0.14   , &
                     0.18   , 0.19   , 0.20   , 0.19   , 0.20   , & 
                     0.21   , 0.18   , 0.18   , 0.25   , 0.18   , & 
                     0.12   , 0.17   , 0.12   , 0.30   , 0.15   , &
                     0.15   / 
!    
      DATA D2DAT/    &
                    1.0    , 1.0    , 1.0    , 1.0    , 1.0    , &
                    1.0    , 1.0    , 1.0    , 1.0    , 1.0    , & 
                    0.5    , 0.5    , 0.5    , 0.5    , 0.5    , & 
                    0.5    , 0.5    , 0.5    , 0.5    , 0.5    , & 
                    0.5    , 0.5    , 0.5    , 0.5    , 0.5    , & 
                    0.5    / 
!    
      DATA RSMINXDAT/    &
                     500.   , 500.   , 500.   , 250.   , 250.   , &
                     250.   , 250.   , 250.   , 250.   , 150.   , & 
                     150.   , 150.   ,  40.   ,  40.   ,  40.   , & 
                      40.   ,  40.   ,  40.   ,  40.   , 150.   , & 
                     150.   , 150.   , 150.   , 500.   , 250.   , & 
                     250.   / 
      DATA LAIDAT/ &
                     0.00   , 0.00   , 0.00   , 5.00   , 6.00   , & 
                    -99.    , -99.   , 6.00   , 4.00   , 3.00   , & 
                    -99.    , 3.00   , 1.00   , -99.   , -99.   , &
                    -99.    , -99.   , -99.   , -99.   , 1.00   , & 
                     1.00   , -99.   , 4.00   , 0.00   , -99.   , & 
                    -99.    / 
      DATA VEGDAT/ &
                     0.00   , 0.00   , 0.00   , 0.90   , 0.99   , & 
                     0.90   , 0.90   , 0.99   , 0.90   , 0.50   , & 
                     0.50   , 0.50   , 0.85   , 0.30   , -99.   , & 
                     -99.   , -99.   , -99.   , -99.   , 0.85   , & 
                     0.10   , 0.50   , 0.60   , 0.00   , 0.90   , & 
                     0.70   / 
      DATA CVDAT/  &   
                     2.0E-5 , 2.0E-5 , 2.0E-5 , 1.0E-5 , 1.0E-5 , & 
                     1.0E-5 , 1.0E-5 , 1.0E-5 , 1.0E-5 , 2.0E-5 , & 
                     2.0E-5 , 2.0E-5 , 2.0E-5 , 2.0E-5 , 2.0E-5 , & 
                     2.0E-5 , 2.0E-5 , 2.0E-5 , 2.0E-5 , 2.0E-5 , & 
                     2.0E-5 , 2.0E-5 , 2.0E-5 , 2.0E-5 , 2.0E-5 , & 
                     1.5E-5 / 
      DATA RGLDAT/  &  
                     100.   , 100.   , 100.   , 30.    , 30.    , & 
                     30.    , 30.    , 30.    , 30.    , 100.   , & 
                     100.   , 100.   , 100.   , 100.   , 100.   , & 
                     100.   , 100.   , 100.   , 100.   , 100.   , & 
                     100.   , 100.   , 100.   , 100.   , 100.   , & 
                     100.   / 
      DATA GAMMADAT/ & 
                     0.    , 0.     , 0.     , 0.04   , 0.04   , & 
                     0.04  , 0.04   , 0.04   , 0.04   , 0.     , & 
                     0.    , 0.     , 0.     , 0.     , 0.     , & 
                     0.    , 0.     , 0.     , 0.     , 0.     , & 
                     0.    , 0.     , 0.     , 0.     , 0.     , & 
                     0.04  / 
!
      DATA Z0MDAT / &
                    0.001  , 0.001  , 0.001  , 1.75   , 2.0    , &
                    1.0    , 2.0    , 3.0    , 0.8    , 0.1    , &
                    0.2    , 0.2    , 0.1    , 0.1    , 0.15   , &
                    0.15   , 0.35   , 0.25   , 0.10   , 0.25   , &
                    5.0    , 0.1    , 0.1    , 0.1    , 1.75   , &
                    0.5    / 
!
      DATA EMISDAT/ & 
                     0.991  , 1.000  , 0.991  , 0.996  , 0.996  , & 
                     0.990  , 0.990  , 0.996  , 0.990  , 0.954  , & 
                     0.954  , 0.954  , 0.993  , 0.993  , 0.981  , &
                     0.981  , 0.981  , 0.981  , 0.981  , 0.981  , &
                     1.000  , 0.992  , 0.995  , 0.941  , 0.993  , & 
                     0.993  /

!
!
!********************************************************************
!                TABLES DESCRIBING THE ANNUAL EVOLUTION OF VEG FIELDS
!********************************************************************
!
!
      REAL VEGCROPS(13)
      DATA VEGCROPS/  &
                    0.05   , 0.05   , 0.95   , 0.95   , 0.95   , &
                    0.95   , 0.95   , 0.80   , 0.90   , 0.05   , & 
                    0.05   , 0.05   , 0.05                      /
      SAVE VEGCROPS 
!
!
      REAL LAI6(13), LAI7(13), LAI11(13), LAI14(13), LAI15(13), & 
           LAI16(13), LAI17(13), LAI18(13), LAI19(13), LAI22(13), & 
           LAI25(13), LAI26(13)
!
      DATA LAI6 / & 
                    0.1   , 0.1   , 0.5   , 1.0   , 2.0   ,  &
                    4.0   , 5.0   , 5.0   , 4.0   , 2.0   , & 
                    1.0   , 0.1   , 0.1                      /
      DATA LAI7 /  &
                    0.1   , 0.1   , 0.5   , 1.0   , 2.0   , & 
                    4.0   , 5.0   , 5.0   , 4.0   , 2.0   ,  &
                    1.0   , 0.1   , 0.1                      /
      DATA LAI11/  &
                    0.5   , 0.5   , 1.0   , 1.0   , 1.5   , & 
                    2.0   , 3.0   , 3.0   , 2.0   , 1.5   , & 
                    1.0   , 0.5   , 0.5                      /
      DATA LAI14/    &
                    0.5   , 0.5   , 0.5   , 0.5   , 0.5   ,  &
                    0.5   , 1.0   , 2.0   , 2.0   , 1.5   ,  &
                    1.0   , 1.0   , 0.5                      /
      DATA LAI15/  &
                    0.1   , 0.1   , 0.1   , 0.1   , 0.3   , & 
                    0.5   , 0.5   , 3.5   , 4.0   , 0.1   , & 
                    0.1   , 0.1   , 0.1                      /
      DATA LAI16/  &
                    0.1   , 0.1   , 0.1   , 0.5   , 1.0   ,  &
                    2.5   , 4.0   , 5.0   , 6.0   , 0.1   ,  &
                    0.1   , 0.1   , 0.1                      /
      DATA LAI17/  &
                    0.1   , 0.1   , 0.1   , 0.5   , 1.0   , & 
                    3.0   , 4.0   , 4.5   , 5.0   , 0.1   , & 
                    0.1   , 0.1   , 0.1                      /
      DATA LAI18/  &
                    0.1   , 0.1   , 0.1   , 0.5   , 1.0   ,  &
                    2.0   , 3.0   , 3.5   , 4.0   , 0.1   ,  &
                    0.1   , 0.1   , 0.1                      /
      DATA LAI19/  &
                    0.1   , 0.1   , 0.1   , 0.5   , 1.0   , & 
                    3.0   , 4.0   , 4.5   , 5.0   , 0.1   , & 
                    0.1   , 0.1   , 0.1                      /
      DATA LAI22/  &
                    1.0   , 1.0   , 0.5   , 0.1   , 0.1   , & 
                    0.1   , 0.1   , 1.0   , 2.0   , 1.5   , & 
                    1.5   , 1.0   , 1.0                      /
      DATA LAI25/  &
                    3.0   , 3.0   , 3.0   , 4.0   , 4.5   ,  &
                    5.0   , 5.0   , 5.0   , 4.0   , 3.0   , & 
                    3.0   , 3.0   , 3.0                      /
      DATA LAI26/  &
                    3.0   , 3.0   , 3.0   , 4.0   , 4.5   , & 
                    5.0   , 5.0   , 5.0   , 4.0   , 3.0   , & 
                    3.0   , 3.0   , 3.0                      /
!*
!*
      SAVE LAI6, LAI7, LAI11, LAI14, LAI15, LAI16, LAI17, &
           LAI18, LAI19, LAI22, LAI25, LAI26
!
!*
!*********************************************************************
!*
!*
      REAL JULIAND
      REAL JULIEN, JULIENS
      REAL INTERPVEG
!*
      EXTERNAL JULIAND, INTERPVEG, AGGCOVERNAT
      EXTERNAL AGGVEGHIGH, AGGVEGLOW, VEGLOWHIGH
!
!***********************************************************************
!     AUTOMATIC ARRAYS
!***********************************************************************
!
      AUTOMATIC (ALDATD    , REAL   , (NCLASS) )
      AUTOMATIC (D2DATD    , REAL   , (NCLASS) )
      AUTOMATIC (EMISDATD  , REAL   , (NCLASS) )
      AUTOMATIC (RSMINDATD , REAL   , (NCLASS) )
      AUTOMATIC (LAIDATDN  , REAL   , (NCLASS) )
      AUTOMATIC (LAIDATDS  , REAL   , (NCLASS) )
      AUTOMATIC (VEGDATDN  , REAL   , (NCLASS) )
      AUTOMATIC (VEGDATDS  , REAL   , (NCLASS) )
      AUTOMATIC (CVDATD    , REAL   , (NCLASS) )
      AUTOMATIC (RGLDATD   , REAL   , (NCLASS) )
      AUTOMATIC (GAMMADATD , REAL   , (NCLASS) )
      AUTOMATIC (Z0MLOCDATD, REAL   , (NCLASS) )
      AUTOMATIC (LOGZ0MLOC , REAL   , (NCLASS) )
      AUTOMATIC (BOGUS1, REAL   , (NI) )
      AUTOMATIC (BOGUS2, REAL   , (NI) )
!
!***********************************************************************
!
!                     Determine the current julian day
!
      julien = JULIAND( delt, kount, date )
!
!
!                     Do the aggregation
!
        DO i=1,nclass
          aldatd(i)    = aldat(i)
          d2datd(i)    = d2dat(i)
          emisdatd(i)  = emisdat(i)
          rsmindatd(i) = RSMINXDAT(i)
          laidatdn(i)  = laidat(i)
          laidatds(i)  = laidat(i)
          vegdatdn(i)  = vegdat(i)
          vegdatds(i)  = vegdat(i)
          cvdatd(i)    = cvdat(i)
          rgldatd(i)   = rgldat(i)
          gammadatd(i) = gammadat(i)
          z0mlocdatd(i)= z0mdat(i)
          ! for z0h should actually be combining the logs 
          logz0mloc(i) = log(z0mdat(i))
        END DO
!
!
!                     Fill the LAIDATD and VEGDATD fields for 
!                     land use classes varying with seasons
!                     (i.e., replace the -99 values in the table
!                     with temporal interpolations from the
!                     tables above)
!
!       tables for northern hemisphere
!
        laidatdn( 6)  = interpveg(julien , lai6 )
        laidatdn( 7)  = interpveg(julien , lai7 )
        laidatdn(11)  = interpveg(julien , lai11)
        laidatdn(14)  = interpveg(julien , lai14)
        laidatdn(15)  = interpveg(julien , lai15)
        laidatdn(16)  = interpveg(julien , lai16)
        laidatdn(17)  = interpveg(julien , lai17)
        laidatdn(18)  = interpveg(julien , lai18)
        laidatdn(19)  = interpveg(julien , lai19)
        laidatdn(22)  = interpveg(julien , lai22)
        laidatdn(25)  = interpveg(julien , lai25)
        laidatdn(26)  = interpveg(julien , lai26)
!
        vegdatdn(15)  = interpveg(julien , vegcrops)
        vegdatdn(16)  = interpveg(julien , vegcrops)
        vegdatdn(17)  = interpveg(julien , vegcrops)
        vegdatdn(18)  = interpveg(julien , vegcrops)
        vegdatdn(19)  = interpveg(julien , vegcrops)
!
!       tables for southern hermisphere
        juliens = julien  - 183
        if (juliens.lt.0) juliens = juliens + 366
!
        laidatds( 6)  = interpveg(juliens, lai6 )
        laidatds( 7)  = interpveg(juliens, lai7 )
        laidatds(11)  = interpveg(juliens, lai11)
        laidatds(14)  = interpveg(juliens, lai14)
        laidatds(15)  = interpveg(juliens, lai15)
        laidatds(16)  = interpveg(juliens, lai16)
        laidatds(17)  = interpveg(juliens, lai17)
        laidatds(18)  = interpveg(juliens, lai18)
        laidatds(19)  = interpveg(juliens, lai19)
        laidatds(22)  = interpveg(juliens, lai22)
        laidatds(25)  = interpveg(juliens, lai25)
        laidatds(26)  = interpveg(juliens, lai26)
!
        vegdatds(15)  = interpveg(juliens, vegcrops)
        vegdatds(16)  = interpveg(juliens, vegcrops)
        vegdatds(17)  = interpveg(juliens, vegcrops)
        vegdatds(18)  = interpveg(juliens, vegcrops)
        vegdatds(19)  = interpveg(juliens, vegcrops)
!
!
!
!     
        DO i=0,ni-1
          DO k=1, nclass
           if(f(dlat+i).ge.0.0) then
!             northern hemisphere
            f(laictem + i +(k-1)*ni)=f(vegf + i +(k-1)*ni)*laidatdn(k)
!           f(laictem + i +(k-1)*ni)=laidatdn(k)
           else
!             southern hemisphere
            f(laictem + i +(k-1)*ni)=f(vegf + i +(k-1)*ni)*laidatds(k)
!           f(laictem + i +(k-1)*ni)=laidatds(k)
           endif
          END DO
        END DO

!     
        CALL aggcovernat( f(vegf), d2datd    , d2datd    , f(rootdp) , &
                          f(dlat), ni, nclass )

! set LAI of deciduous trees to that of Values for Class 6
        DO i=0,ni-1
           if(f(dlat+i).ge.0.0) then
!             northern hemisphere
              f(laideci+i)= laidatdn( 6)
           else
!             southern hemisphere
              f(laideci+i)= laidatds( 6)
           endif        
        ENDDO
!
!    Find corresponding fields for HIGH VEGETATION TYPES
!
       CALL aggveghigh( f(vegf), laidatdn  , laidatds  , f(laivh) , &  
                        f(dlat), ni, nclass )
        CALL aggveghigh( f(vegf), aldatd    , aldatd    , f(alvh)  , &  
                         f(dlat), ni, nclass )
        CALL aggveghigh( f(vegf), emisdatd  , emisdatd  , f(emisvh), &  
                         f(dlat), ni, nclass )
        CALL aggveghigh( f(vegf), rsmindatd , rsmindatd , f(stomrvh), & 
                         f(dlat), ni, nclass )
        CALL aggveghigh( f(vegf), cvdatd    , cvdatd    , f(cvh)   , &  
                         f(dlat), ni, nclass )
!
!         aggregate logs ...
!
        CALL aggveghigh( f(vegf), logz0mloc , logz0mloc , f(z0mvh) , &  
                         f(dlat), ni, nclass )
        ! reverse log operation to get final z0h
        ! when using f(name) ..name is pointer to fist elemant of 
        ! "name" pointer, so loop i=0, ni-1
        DO i=0,ni-1
           f(z0mvh+i)= exp(f(z0mvh+i))
        ENDDO
! 
        CALL aggveghigh( f(vegf), rgldatd   , rgldatd   , f(rglvh) , &  
                         f(dlat), ni, nclass )
        CALL aggveghigh( f(vegf), gammadatd , gammadatd , f(gamvh) , &  
                         f(dlat), ni, nclass )
!
!    Find corresponding fields for LOW VEGETATION TYPES
!
       CALL aggveglow( f(vegf), laidatdn  , laidatds  , f(laivl) , &  
                       f(dlat), ni, nclass )
        CALL aggveglow( f(vegf), aldatd    , aldatd    , f(alvl)  , &  
                        f(dlat), ni, nclass )
        CALL aggveglow( f(vegf), emisdatd  , emisdatd  , f(emisvl), &  
                        f(dlat), ni, nclass )
        CALL aggveglow( f(vegf), rsmindatd , rsmindatd , f(stomrvl), & 
                        f(dlat), ni, nclass )
        CALL aggveglow( f(vegf), cvdatd    , cvdatd    , f(cvl)   , &  
                        f(dlat), ni, nclass )
!
!         aggregate logs
        CALL aggveglow( f(vegf), logz0mloc, logz0mloc, f(z0mvl) , &   
                        f(dlat), ni, nclass )
!
        DO i=0,ni-1
           f(z0mvl+i)= exp(f(z0mvl+i))
        ENDDO
! 
        CALL aggveglow( f(vegf), rgldatd   , rgldatd   , f(rglvl) , &
                        f(dlat), ni, nclass )
        CALL aggveglow( f(vegf), gammadatd , gammadatd , f(gamvl) , &  
                        f(dlat), ni, nclass )
!
!    Compute LOW and HIGH vegetation fractions as well as 
!    DECIDUOUS and EVERGREEN (trees) vegetation fraction
!
        CALL veglowhigh( f(vegf), vegdatdn  , vegdatds  , f(vegl)  ,  &
                         f(vegh), f(deciduous), f(evergreen),          &
                         f(dlat), ni, nclass  )        

!         CALL veglowhigh( f(vegf), vegdatdn  , vegdatds  , bogus1  ,  &
!                         bogus2, f(deciduous), f(evergreen),          &
!                         f(dlat), ni, nclass, nclassurb  )


! 
      RETURN
      END

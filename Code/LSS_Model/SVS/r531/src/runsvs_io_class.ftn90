MODULE runsvs_io
USE runsvs_mod
USE runsvs_utils
	INTEGER, PARAMETER :: fid_ini = 50
	INTEGER, PARAMETER :: fid_met = 51
	INTEGER, PARAMETER :: fid_out = 52
CONTAINS
!
SUBROUTINE open_files(inifile,metfile,outfile)
!
CHARACTER (LEN=*) inifile
CHARACTER (LEN=*) metfile
CHARACTER (LEN=*) outfile
!
OPEN(UNIT=fid_ini,FILE=TRIM(inifile),IOSTAT=istat,STATUS='OLD',READONLY)
OPEN(UNIT=fid_met,FILE=TRIM(metfile),IOSTAT=istat,STATUS='OLD',READONLY)
OPEN(UNIT=fid_out,FILE=TRIM(outfile),IOSTAT=istat)
!
END SUBROUTINE open_files
!
SUBROUTINE close_files
IMPLICIT NONE
!
CLOSE(fid_ini)
CLOSE(fid_met)
CLOSE(fid_out)
!
END SUBROUTINE close_files
!
SUBROUTINE read_ini_file(bus,bussiz)
!
IMPLICIT NONE
#include "thermoconsts.inc"
!
INTEGER bussiz
REAL bus(bussiz)
!
INTEGER i,j
REAL sum
!
! CLASS INI parameters
!
REAL deglat,deglon,zrfmgrd,zrfhgrd,zbldgrd,gcgrd,ilw,nltest,nmtest
REAL fcanrow(5),lamxrow(4)
REAL lnz0row(5),lamnrow(4)
REAL alvcrow(5),cmasrow(4)
REAL alicrow(5),rootrow(4)
REAL rsmnrow(4),qa50row(4)
REAL vpdarow(4),vpdbrow(4)
REAL psgarow(4),psgbrow(4)
REAL drnrow,sdeprow,farerow
REAL xslprow,grkfrow,mannrow,wfcirow,midrow
REAL sandrow(3)
REAL clayrow(3)
REAL orgmrow(3)
!
! Read CLASS-style INI file
!
! Read and ignore header 
DO i=1,3
	READ(fid_ini,*)
END DO
!
! Read parameters
READ(fid_ini,'(5F10.2,F7.1,3I5)') deglat,deglon,zrfmgrd,zrfhgrd,zbldgrd,gcgrd,ilw,nltest,nmtest
READ(fid_ini,'(9F8.3)')           (fcanrow(i),i=1,5),(lamxrow(i),i=1,4)
READ(fid_ini,'(9F8.3)')           (lnz0row(i),i=1,5),(lamnrow(i),i=1,4)
READ(fid_ini,'(9F8.3)')           (alvcrow(i),i=1,5),(cmasrow(i),i=1,4)
READ(fid_ini,'(9F8.3)')           (alicrow(i),i=1,5),(rootrow(i),i=1,4)
READ(fid_ini,'(4F8.3,8X,4F8.3)')  (rsmnrow(i),i=1,4),(qa50row(i),i=1,4)
READ(fid_ini,'(4F8.3,8X,4F8.3)')  (vpdarow(i),i=1,4),(vpdbrow(i),i=1,4)
READ(fid_ini,'(4F8.3,8X,4F8.3)')  (psgarow(i),i=1,4),(psgbrow(i),i=1,4)
READ(fid_ini,'(3F8.3)')           drnrow,sdeprow,farerow
READ(fid_ini,'(4E8.1,I8)')        xslprow,grkfrow,mannrow,wfcirow,midrow
READ(fid_ini,'(3F10.1)')          (sandrow(i),i=1,3)
READ(fid_ini,'(3F10.1)')          (clayrow(i),i=1,3)
READ(fid_ini,'(3F10.1)')          (orgmrow(i),i=1,3)
!
! Parse INI file
DO i=0,NG-1
	! Convert lat,lon to radian
	bus(dlat+i)=deglat*PI/180.
	bus(dlon+i)=deglon*PI/180.
	! Map CLASS parameters to SVS parameters
	IF(observed_forcing)THEN
		bus(zusl+i)=zrfmgrd  ! height of wind forcing
        	bus(ztsl+i)=zrfhgrd  ! height of temperature forcing
	END IF
	bus(vegf+3*NG+i)=fcanrow(1)  ! needleleaf evergreen
	bus(vegf+6*NG+i)=fcanrow(2)  ! broadleaf deciduous
	bus(vegf+14*NG+i)=fcanrow(3) ! crops
	bus(vegf+13*NG+i)=fcanrow(4) ! grass
	bus(vegf+20*NG+i)=fcanrow(5) ! urban
	bus(slop+i)=xslprow          ! subgrid-scale slope
	bus(draindens+i)=0.001       ! NOT FOUND IN STANDARD INI FILE
	bus(rootdp+i)=sdeprow        ! max depth of root zone
	! Compute weighted average of log z0 wrt vegetation
	! (used for momentum only - local z0 used for temperature/humidity)
	bus(z0+i)=0.
	sum=0.
	DO j=1,5
		bus(z0+i)=bus(z0+i)+fcanrow(j)*lnz0row(j)
		sum=sum+fcanrow(j)
	END DO
	IF(sum.GT.0.)THEN
		bus(z0+i)=bus(z0+i)/sum
	END IF
	bus(z0+i)=EXP(bus(z0+i))
	! Map soil texture:
	! CLASS layer <-> SVS layer
	!       1             1-2
	!       2              3
	!       3             4-7
	bus(sand+i)=MAX(sandrow(1),0.)
	bus(sand+NG+i)=MAX(sandrow(1),0.)
	bus(sand+2*NG+i)=MAX(sandrow(2),0.)
	bus(clay+i)=MAX(clayrow(1),0.)
	bus(clay+NG+i)=MAX(clayrow(1),0.)
	bus(clay+2*NG+i)=MAX(clayrow(2),0.)
	DO j=3,6
		bus(sand+j*NG+i)=MAX(sandrow(3),0.)
		bus(clay+j*NG+i)=MAX(clayrow(3),0.)
	END DO
END DO
!
! Summarize what we just did
PRINT*,"--------------------------------"
PRINT*,"CLASS INI file read successfully"
PRINT*,"--------------------------------"
PRINT*,"LOCATION: (",deglat,",",deglon,")"
PRINT*,"VEGETATION COVER:"
PRINT*,"% NEEDLELEAF:     ",bus(vegf+3)*100
PRINT*,"% BROADLEAF:      ",bus(vegf+6)*100
PRINT*,"% CROPS:          ",bus(vegf+14)*100
PRINT*,"% GRASS:          ",bus(vegf+13)*100
PRINT*,"% URBAN:          ",bus(vegf+20)*100
PRINT*,"ROUGHNESS LENGTH: ",bus(z0)
PRINT*,"SLOPE:            ",bus(slop)
PRINT*,"DRAIN.DENSITY     ",bus(draindens)
PRINT*,"ROOT DEPTH:       ",bus(rootdp)
PRINT*,"% SAND:           ",bus(sand),bus(sand+2*NG),bus(sand+3*NG)
PRINT*,"% CLAY:           ",bus(clay),bus(clay+2*NG),bus(clay+3*NG)
PRINT*,"--------------------------------"
!
RETURN
END SUBROUTINE read_ini_file
!
SUBROUTINE read_met_file(date_v,hour_v,date_f,hour_f,bus,bussiz)
IMPLICIT NONE
!
#include "thermoconsts.inc"
!
INTEGER date_v,hour_v,date_f,hour_f,bussiz
REAL bus(bussiz)
!
INTEGER incdatr,newdate
EXTERNAL incdatr,newdate
!
INTEGER ihour,imin,idoy,iyear
REAL fb,fi,pr,ta,qa,uv,p0
!
INTEGER i,istat,datecmc_jan1,datecmc_f
REAL*8 hours
!
DO
!
!	Read data for one forcing time step
	READ(fid_met,*,IOSTAT=istat)ihour,imin,idoy,iyear,fb,fi,pr,ta,qa,uv,p0
        IF(istat.NE.0)THEN
                PRINT*,"Error reading MET file for ",date_v,hour_v
                CALL close_files
                STOP
	END IF
!
!       Compute date/hour of forcing data
	date_f = iyear*10000+101
	hour_f = imin*10000
	istat = newdate(datecmc_jan1,date_f,hour_f,3) ! Compute date valid for start of year
	hours = (idoy-1)*24+ihour                     ! Number of hours since start of year
	istat = incdatr(datecmc_f,datecmc_jan1,hours) ! Compute current date valid
	istat = newdate(datecmc_f,date_f,hour_f,-3)   ! Convert to printable
!
!	If we have read data in the present or in the future we stop, otherwise we continue reading
	IF((date_f.GE.date_v.AND.hour_f.GE.hour_v).OR.(date_f.GT.date_v))THEN
		EXIT
	END IF
END DO
!
DO i=0,NG-1
	IF(ta.GT.0.)THEN
		bus(rainrate+i)=pr/1000.
		bus(snowrate+i)=0.
	ELSE
		bus(rainrate+i)=0.
		bus(snowrate+i)=pr/1000.
	END IF
	bus(flusolis+i)=fb
	bus(fdsi+i)=fi
	bus(tmoins+i)=ta+tcdk
	bus(humoins+i)=qa
	bus(umoins+i)=uv
	bus(vmoins+i)=0.
	bus(pmoins+i)=p0
END DO
RETURN
END SUBROUTINE read_met_file
!
SUBROUTINE write_out_file(date,hour,bus,bussiz)
!
IMPLICIT NONE
!
INTEGER bussiz,date,hour
REAL bus(bussiz)
!
INTEGER i,j
IF(date-(date/100)*100.EQ.1.AND.hour.EQ.0)PRINT*,"Simulation completed up to: ", date
DO i=0,NG-1
!	WRITE(fid_out,'(I8,A1,I8.8,I5,16(F10.4))') date,'.',hour,i+1,(bus(wdsoil+j*NG+i),j=0,6), bus(runofftot+i), (bus(latflw+j*NG+i),j=0,6), bus(drainaf+i)
	WRITE(fid_out,'(I8,A1,I8.8,I5,7(F10.4))') date,'.',hour,i+1,(bus(wdsoil+j*NG+i),j=0,6)
END DO
RETURN
END SUBROUTINE write_out_file
!
END MODULE runsvs_io
